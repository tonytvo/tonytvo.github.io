{"componentChunkName":"component---src-templates-blog-post-js","path":"/effective-typescript/","result":{"data":{"site":{"siteMetadata":{"title":"Conversations on agile technical practices and investments","disqus":{"shortName":"trungvo"}}},"markdownRemark":{"id":"9679aa6a-1780-509e-8dcc-ea51193762d8","excerpt":"Understand the relationship between typescript and javascript If you’re migrating an existing javascript codebase to typesript. It means that you don’t have to…","html":"<h1 id=\"understand-the-relationship-between-typescript-and-javascript\" style=\"position:relative;\"><a href=\"#understand-the-relationship-between-typescript-and-javascript\" aria-label=\"understand the relationship between typescript and javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Understand the relationship between typescript and javascript</h1>\n<ul>\n<li>\n<p>If you’re migrating an existing javascript codebase to typesript. It means that you don’t have to rewrite any of your code in another language to start using TypeScript and get the benefits it provides.</p>\n</li>\n<li>\n<p>one of the goals of TypeScript’s type system is to detect code that will throw an exception at runtime, without having to run your code. The type checker cannot always spot code that will throw exceptions, but it will try.</p>\n</li>\n<li>\n<p>type annotations tell TypeScript what your intent is, and this lets it spot places where your code’s behavior does not match your intent.</p>\n</li>\n<li>\n<p><a href=\"./ts-superset-js.png\">typescript is superset of javascript</a></p>\n</li>\n<li>\n<p>Things to remember</p>\n<ul>\n<li>TypeScript is a superset of JavaScript. In other words, all JavaScript programs are already TypeScript programs. TypeScript has some syntax of its own, so typeScript programs are not, in general, valid JavaScript programs.</li>\n<li>TypeScript adds a type system that models JavaScript’s runtime behavior and tries to spot code which will throw exceptions at runtime. But you shouldn’t expect it to flag every exception. It is possible for code to pass the type checker but still throw at runtime.</li>\n<li>While TypeScript’s type system largely models JavaScript behavior, there are some constructs that JavaScript allows but TypeScript chooses to bar, such as calling functions with the wrong number of arguments. This is largely a matter of taste.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"know-which-typescript-options-youre-using\" style=\"position:relative;\"><a href=\"#know-which-typescript-options-youre-using\" aria-label=\"know which typescript options youre using permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>know which TypeScript Options You’re Using</h1>\n<ul>\n<li>if you mean to allow null, you can fix the error by making your intent explicit:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>Things to Remember</strong>\n<ul>\n<li>The TypeScript compiler includes several settings which affect core aspects of the language.</li>\n<li>Configure TypeScript using tsconfig.json rather than command-line. options.</li>\n<li>Turn on noImplicit Any unless you are transitioning a JavaScript project to TypeScript.</li>\n<li>Use strictNullChecks to prevent “undefined is not an object”- style runtime errors.</li>\n<li>Aim to enable strict to get the most thorough checking that TypeScript can offer.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"understand-that-code-generation-is-independent-of-types\" style=\"position:relative;\"><a href=\"#understand-that-code-generation-is-independent-of-types\" aria-label=\"understand that code generation is independent of types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>understand that code generation is independent of types</h1>\n<ul>\n<li>At a high level, tsc (the TypeScript compiler) does two things:\n<ul>\n<li>It converts next-generation TypeScript/JavaScript to an older version of JavaScript that works in browsers (“transpiling”).</li>\n<li>It checks your code for type errors.</li>\n</ul>\n</li>\n<li>The types in your code cannot affect the JavaScript that TypeScript emits. Since it’s this JavaScript that gets executed, this means that your types can’t affect the way your code runs.</li>\n<li>Code with Type Errors Can Produce Output because Because code output is independent of type checking</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> test.ts\n<span class=\"token builtin class-name\">let</span> x <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\nX <span class=\"token operator\">=</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">;</span>\n$ tsc test.ts\ntest.ts:2:1- error TS2322: Type <span class=\"token string\">'1234'</span> is not assignable to <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'string'</span>\n<span class=\"token number\">2</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">;</span>\n\n$ <span class=\"token function\">cat</span> test.js\nvar x <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>You can think of all TypeScript errors as being similar to warnings in those languages: it’s likely that they indicate a problem and are worth investigating, but they won’t stop the build.</p>\n<ul>\n<li>It’s better to say that your code has errors, or that it “doesn’t type check.”</li>\n</ul>\n</li>\n<li>\n<p>You should aim for zero errors when you commit code, lest you fall into the trap of having to remember what is an expected or unexpected error. If you want to disable output on errors, you can use the noEmitOnError option in tsconfig.json, or the equivalent in your build tool.</p>\n</li>\n<li>\n<p><strong>You Cannot Check TypeScript Types at Runtime</strong></p>\n</li>\n<li>\n<p><strong>Things to Remember</strong></p>\n<ul>\n<li>Code generation is independent of the type system. This means that TypeScript types cannot affect the runtime behavior or performance of your code.\n<ul>\n<li>the TypeScript compiler will introduce build time overhead. The TypeScript team takes compiler performance seriously and compilation is usually quite fast, especially for incremental builds. If the overhead becomes significant, your build tool may have a “transpile only” option to skip the type checking.</li>\n<li>The code that TypeScript emits to support older runtimes may incur a performance overhead vs. native implementations. For example, if you use generator functions and target ES5, which predates generators, then tsc will emit some helper code to make things work. This may have some overhead vs. a native implementation of generators. In any case, this has to do with the emit target and language levels and is still independent of the types.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token keyword\">as</span> <span class=\"token function\">Number</span> <span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> val <span class=\"token keyword\">as</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Looking at the generated JavaScript makes it clear what this function really does:</span>\n<span class=\"token keyword\">function</span> <span class=\"token keyword\">as</span> <span class=\"token function\">Number</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//There is no conversion going on whatsoever. The as number is a type operation, so it cannot affect the runtime behavior of your code. To normalize the value you'll need to check its runtime type and do the conversion using JavaScript constructs:</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">asNumber</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">val</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">?</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>runtime types may not be the same as declared types</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setLightSwitch</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token boolean\">true</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">turnLighton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token boolean\">false</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">turnLightOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Im afraid I cant do that.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// The key is to remember that boolean is the declared type. Because it is a TypeScript type, it goes away at runtime. In JavaScript code, a user might inadvertently call setLightSwitch with a value like \"ON\"</span></code></pre></div>\n<ul>\n<li><strong>You Cannot Overload a Function Based on TypeScript Types</strong>\n<ul>\n<li>Languages like C++ allow you to define multiple versions of a function that differ only in the types of their parameters. This is called “function overloading” Because the runtime behavior of your code is independent of its TypeScript types, this construct isn’t possible in TypeScript:</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// Duplicate function implementation </span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// Duplicate function implementation</span>\n\n<span class=\"token comment\">// TypeScript does provide a facility for overloading functions, but it operates entirely at the type level. You can provide multiple declarations for a function, but only a single implementation:</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> three <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type is number</span>\n<span class=\"token keyword\">const</span> twelve <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type is string</span>\n<span class=\"token comment\">//The first two declarations of add only provide type information. When TypeScript produces JavaScript output, they are removed, and only the implementation remains. </span></code></pre></div>\n<ul>\n<li>It is possible for a program with type errors to produce code (“compile”).</li>\n<li>TypeScript types are not available at runtime. To query a type at runtime, you need some way to reconstruct it. Tagged unions and property checking are common ways to do this. Some constructs, such as class, introduce both a TypeScript type and a value that is available at runtime.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//check for property example</span>\n<span class=\"token keyword\">function</span> calculate <span class=\"token function\">Area</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">shape</span><span class=\"token operator\">:</span> Shape</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'height'</span> <span class=\"token keyword\">in</span> shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nshape<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type is Rectangle</span>\n<span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\nshape<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type is Square</span>\n\n<span class=\"token comment\">// tagged unions example</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">'square'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">kind</span><span class=\"token operator\">:</span> <span class=\"token string\">'rectangle'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ntype Shape <span class=\"token operator\">=</span> Square <span class=\"token operator\">|</span> Rectangle<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// class constructs introduce both a type and a value</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">public</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">public</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ntype Shape <span class=\"token operator\">=</span> Square <span class=\"token operator\">|</span> Rectangle<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateArea</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">shape</span><span class=\"token operator\">:</span> Shape</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shape <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    shape<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type is Rectangle </span>\n    <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    shape<span class=\"token punctuation\">;</span><span class=\"token comment\">// Type is Square return shape.width</span>\n    <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width<span class=\"token operator\">*</span>shape<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//this works because class Rectangle introduces both a type and a value, whereas interface only introduced a type</span>\n<span class=\"token comment\">//The Rectangle in type Shape = Square | Rectangle refers to the type, but the Rectangle in shape instanceof Rectangle refers to the value.</span></code></pre></div>\n<h1 id=\"get-comfortable-with-structural-typing-javascript\" style=\"position:relative;\"><a href=\"#get-comfortable-with-structural-typing-javascript\" aria-label=\"get comfortable with structural typing javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>get comfortable with structural typing javascript</h1>\n<ul>\n<li>\n<p>javascript is inherently duck typed: if you pass a function a value with all the right properties, it won’t care how you made the value. It will just use it. (“If it walks like a duck and talks like a duck…“)</p>\n</li>\n<li>\n<p>Understand that JavaScript is duck typed and TypeScript uses structural typing to model this: values assignable to your interfaces might have properties beyond those explicitly listed in your type declarations. Types are open and are not “sealed.”</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Say you're working on a physics library and have a 2D vector type:</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector2D</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//You write a function to calculate its length:</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">v</span><span class=\"token operator\">:</span> Vector2D</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// now you introduce the notion of a named vector</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">NamedVector</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//The calculateLength function will work with NamedVectors because they have x and y properties, which are numbers. TypeScript is smart enough to figure this out</span>\n<span class=\"token keyword\">const</span> v NamedVector <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Zee'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n<span class=\"token function\">calculateLength</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK, result is 5</span>\n\n<span class=\"token comment\">//What is interesting is that you never declared the relationship between Vector2D and NamedVector. </span>\n<span class=\"token comment\">//And you did not have to write an alternative implementation of calculateLength for NamedVectors.</span>\n<span class=\"token comment\">//It allowed calculateLength to be called with a NamedVector because its structure was compatible with Vector2D</span>\n\n<span class=\"token comment\">// this can also lead to trouble with 3D vector type as  the calculateLength only use x, y (and ignore z) to calculate the length</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector3D</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">z</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateLengthL1</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">v</span><span class=\"token operator\">:</span> Vector3D</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">let</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> axis <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">const</span> coord <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span>axis<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Element implicitly has an 'any' type because</span>\n                           <span class=\"token comment\">// 'string' can't be used to index type 'Vector3D'</span>\n    length <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span> <span class=\"token punctuation\">(</span>coord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// this logic assumes that Vector3D is sealed and does not have other properties, but it could</span>\n<span class=\"token keyword\">const</span> vec3D <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">z</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">'123 Broadway'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">calculateLengthL1</span> <span class=\"token punctuation\">(</span>vec3D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK, returns NaN</span>\n\n<span class=\"token comment\">//but in this case an implementation without loops would be better:</span>\n<span class=\"token keyword\">function</span> calculate <span class=\"token function\">LengthL1</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">v</span><span class=\"token operator\">:</span> Vector3D</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Structural typing can also lead to surprises with classes, which are compared structurally for assignability:</span>\n<span class=\"token comment\">// Be aware that classes also follow structural typing rules. You may not have an instance of the class you expect!</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span> \n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token string\">'instance of C'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">'object literal'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK!</span>\n\n<span class=\"token comment\">// Structural typing is beneficial when you're writing tests.</span>\n<span class=\"token comment\">// Say you have a function that runs a query on a database and processes the results:</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Author</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">last</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getAuthors</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">database</span><span class=\"token operator\">:</span> PostgresDB</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Author<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> authorRows <span class=\"token operator\">=</span> database<span class=\"token punctuation\">.</span><span class=\"token function\">runQuery</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SELECT FIRST, LAST FROM AUTHORS</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> authorRows<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">row</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">last</span><span class=\"token operator\">:</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// To test this, you could create a mock PostgresDB. But a better approach is to use structural typing and define a narrower interface:</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">DB</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">runQuery</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">sql</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> any <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getAuthors</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">database</span><span class=\"token operator\">:</span> <span class=\"token constant\">DB</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Author<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> authorRows <span class=\"token operator\">=</span> database<span class=\"token punctuation\">.</span><span class=\"token function\">runQuery</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SELECT FIRST, LAST FROM AUTHORS</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> authorRows<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">row</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">last</span><span class=\"token operator\">:</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//You can still pass getAuthors a PostgresDB in production since it has a runQuery method.</span>\n<span class=\"token comment\">//Because of structural typing, the PostgresDB doesn't need to say that it implements DB.</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getAuthors'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> authors <span class=\"token operator\">=</span> <span class=\"token function\">getAuthors</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> \n    <span class=\"token function\">runQuery</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">sql</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Toni'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Morrison'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Maya'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Angelou'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span> <span class=\"token punctuation\">(</span>authors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> <span class=\"token string\">'Toni'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">last</span><span class=\"token operator\">:</span> <span class=\"token string\">'Morrison'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> <span class=\"token string\">'Maya'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">last</span><span class=\"token operator\">:</span> <span class=\"token string\">'Angelou'</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// TypeScript will verify that our test DB conforms to the interface. </span>\n<span class=\"token comment\">// And your tests don't need to know anything about your production database: no mocking libraries necessary!</span>\n<span class=\"token comment\">// By introducing an abstraction (DB), we've freed our logic (and tests) from the details of a specific implementation (PostgresDB).</span>\n<span class=\"token comment\">// Another advantage of structural typing is that it can cleanly sever dependencies between libraries.</span></code></pre></div>\n<h1 id=\"limit-use-of-the-any-type\" style=\"position:relative;\"><a href=\"#limit-use-of-the-any-type\" aria-label=\"limit use of the any type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>limit use of the any Type</h1>\n<ul>\n<li>\n<p>The “any type” effectively silences the type checker and TypeScript language services. It can mask real problems, harm developer experience, and undermine confidence in the type system. Avoid using it when you can!</p>\n</li>\n<li>\n<p>TypeScript’s type system is <em>gradual and optional</em>: <em>gradual</em> because you can add types to your code bit by bit and <em>optional</em> because you can disable the type checker whenever you like. The key to these features is the any type:</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\nage <span class=\"token operator\">=</span> <span class=\"token string\">'12'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type \"12\" is not assignable to type 'number'</span>\nage <span class=\"token operator\">=</span> <span class=\"token string\">'12'</span> <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n<span class=\"token comment\">//The type checker is right to complain here, but you can silence it just by typing as any.</span></code></pre></div>\n<ul>\n<li><strong>There’s No Type Safety with any Types</strong>\n<ul>\n<li>In the preceding example, the type declaration says that age is a number. But any lets you assign a string to it. The type checker will believe that it’s a number (that’s what you said, after all), and the chaos will go uncaught:</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">age <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK; at runtime, age is now \"121\"</span></code></pre></div>\n<ul>\n<li>\n<p><strong>any Lets You Break Contracts</strong></p>\n<ul>\n<li>When you write a function, you are specifying a contract: if the caller gives you a certain type of input, you’ll produce a certain type of output. But with an any type you can break these contracts:</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">calculateAge</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">birthDate</span><span class=\"token operator\">:</span> Date</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ... </span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">birthDate</span><span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> <span class=\"token string\">'1990-01-19'</span><span class=\"token punctuation\">;</span> <span class=\"token function\">calculateAge</span> <span class=\"token punctuation\">(</span>birthDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></code></pre></div>\n<ul>\n<li><strong>There Are No Language Services for any Types</strong>\n<ul>\n<li>\n<p>When a symbol has a type, the TypeScript language services are able to provide intelligent autocomplete and contextual documentation  but for symbols with an any type, you’re on your own</p>\n</li>\n<li>\n<p>Renaming is another such service. If you have a Person type and functions to format a person’s name:</p>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">first</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span> last<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">formatName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">p</span><span class=\"token operator\">:</span> Person</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>p<span class=\"token punctuation\">.</span>first<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>p<span class=\"token punctuation\">.</span>last<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">formatNameAny</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">p</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>p<span class=\"token punctuation\">.</span>first<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>p<span class=\"token punctuation\">.</span>last<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>TypeScript’s motto is “JavaScript that scales.” A key part of “scales” is the language services, which are a core part of the TypeScript experience. Losing them will lead to a loss in productivity, not just for you but for everyone else working with your code.</p>\n</li>\n<li>\n<p><strong>any Types Mask Bugs When You Refactor Code</strong></p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Component</span> Props <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onSelectItem</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">item</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Here's code that manages that component:</span>\n<span class=\"token keyword\">function</span> render <span class=\"token function\">Selector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> ComponentProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*...*/</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">selectedId</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleSelectItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">item</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  selectedId<span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">renderSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">onSelectItem</span><span class=\"token operator\">:</span> handleSelectItem<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Later you rework the selector in a way that makes it harder to pass the whole item object through to onSelectItem. </span>\n<span class=\"token comment\">//But that's no big deal since you just need the ID. You change the signature in Component Props. It passed type checker but it produces runtime exception</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Component</span> Props <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function-variable function\">onSelectItem</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p><strong>any Hides Your Type Design</strong></p>\n</li>\n<li>\n<p><strong>any Undermines Confidence in the Type System</strong></p>\n<ul>\n<li>\n<p>Every time you make a mistake and the type checker catches it, it boosts your confidence in the type system. But when you see a type error at runtime, that confidence takes a hit. If you’re introducing TypeScript on a larger team, this might make your coworkers question whether TypeScript is worth the effort. any types are often the source of these uncaught errors.</p>\n</li>\n<li>\n<p>TypeScript aims to make your life easier, but TypeScript with lots of any types can be harder to work with than untyped JavaScript because you have to fix type errors and still keep track of the real types in your head. When your types match reality, it frees you from the burden of having to keep type information in your head. TypeScript will keep track of it for you.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"use-your-editor-to-interrogate-and-explore-the-type-system\" style=\"position:relative;\"><a href=\"#use-your-editor-to-interrogate-and-explore-the-type-system\" aria-label=\"use your editor to interrogate and explore the type system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Your Editor to Interrogate and Explore the Type System</h1>\n<ul>\n<li>Take advantage of the TypeScript language services by using an editor that can use them.</li>\n</ul>\n<p>Use your editor to build an intuition for how the type system works and how TypeScript infers types.</p>\n<ul>\n<li>\n<p>Know how to jump into type declaration files to see how they model behavior.</p>\n</li>\n<li>\n<p>When you install TypeScript, you get two executables:</p>\n<ul>\n<li>tsc, the TypeScript compiler</li>\n<li>tsserver, the TypeScript standalone server</li>\n</ul>\n</li>\n<li>\n<p>You’re much more likely to run the TypeScript compiler directly, but the server is every bit as important because it provides language services. These include autocomplete, inspection, navigation, and refactoring. You typically use these services through your editor. If yours isn’t configured to provide them, then you’re missing out! Services like autocomplete are one of the things that make TypeScript such a joy to use. But beyond convenience, your editor is the best place to build and test your knowledge of the type system. This will help you build an intuition for when TypeScript is able to infer types, which is key to writing compact, idiomatic code (see Item 19).</p>\n</li>\n</ul>\n<p>The details will vary from editor to editor, but you can generally mouse over a symbol to see what TypeScript considers its type (see Figure 2-1).\nlet num: number\nlet num = 10;\nFigure 2-1. An editor (vscode) showing that the inferred type of the num symbol is number You didn’t write number here, but TypeScript was able to figure it out based on the value 10.\nYou can also inspect functions, as shown in Figure 2-2.\nfunction add(a: number, b: number): number function add (a: number, b: number) { return a + b;\n}\nFigure 2-2. Using an editor to reveal the inferred type for a function</p>\n<p>The noteworthy bit of information is the inferred value for the return type, number. If this does not match your expectation, you should add a type declaration and track down the discrepancy (see Item 9).\nSeeing TypeScript’s understanding of a variable’s type at any given point is essential for building an intuition around widening (Item 21) and narrowing (Item 22). Seeing the type of a variable change in the branch of a conditional is a tremendous way to build confidence in the type system (see Figure 2-3).\nfunction logMessage(message: string | null) { if (message) {\n}\n}\n(parameter) message: string\nmessage\nFigure 2-3. The type of message is string/ null outside the branch but string inside.\nYou can inspect individual properties in a larger object to see what TypeScript has inferred about them (see Figure 2-4).</p>\n<p>const foo = {\n(property) x: number []\nx: [1, 2, 3],\nbar: {\nTo see inferred generic types in the middle of a\nchain of operations, inspect the method name (as shown in Figure 2-5).\nfunction restOfPath(path: string) {\n(method) Array<string>.slice(start?: number, end?: number): string[] Returns section of an array.\n@param start - The beginning of the specified portion of the array.\n@param end The end of the specified portion of the array.\nname: ‘Fred’\n}\n};\nFigure 2-4. Inspecting how TypeScript has inferred types in an object\nIf your intention was for x to be a tuple type ([number, number, number]), then a type annotation will be required.\n}\nreturn path.split(’/‘).slice(1).join(’/’);\nFigure 2-5. Revealing inferred generic types in a chain of method calls\nThe Array<string> indicates that TypeScript understands that split produced an array of strings. While there was little ambiguity in this case, this information can prove essential in writing and debugging long chains of function calls.</p>\n<p>Seeing type errors in your editor can also be a great way to learn the nuances of the type system. For example, this function tries to get an HTMLElement by its ID, or return a default one. TypeScript flags two errors:\nfunction getElement (el0rId: string| HTMLElement | null): HTMLElement { if (typeof el0rId === ‘object’) { return el0rId;\n//\n‘HTMLElement | null’ is not assignable to ‘HTMLElement’ } else if (el0rId === null) { return document.body;\n} else {\nconst el =\ndocument.getElementById(el0rId);\nreturn el;\n// ~~~~~~~\n‘HTMLElement | null’ is not assignable to ‘HTMLElement’\n}\nThe intent in the first branch of the if statement was to filter down to just the objects, namely, the HTMLElements. But oddly enough, in JavaScript typeof null is “object”, so el0rId could still be null in that branch. You can fix this by putting the null check first. The second error is because document.getElementById can return null, so you need to handle that case as well, perhaps by throwing an exception. Language services can also help you navigate through libraries and type declarations. Suppose you see a call to the fetch function in code and want to learn more about it. Your editor should\n}</p>\n<h1 id=\"provide-a-go-to-definition-option-in-mine-it-looks-like-it-does-in-figure-2-6const-response--fetchhttpexamplecomgo-to-definitionf12peek-definitionxf12go-to-type-definitionfind-all-referencesxf12f12peek-referencesfigure-2-6-the-typescript-language-service-provides-a-go-to-definition-feature-that-should-be-surfaced-in-your-editorselecting-this-option-takes-you-into-libdomdts-the-type-declarations-which-typescript-includes-for-the-domdeclare-function-fetchinput-request-info-init-requestinit--promiseresponseyou-can-see-that-fetch-returns-a-promise-and-takes-two-arguments-clicking-through-on-requestinfo-brings-you-heretype-request-info-request-string\" style=\"position:relative;\"><a href=\"#provide-a-go-to-definition-option-in-mine-it-looks-like-it-does-in-figure-2-6const-response--fetchhttpexamplecomgo-to-definitionf12peek-definitionxf12go-to-type-definitionfind-all-referencesxf12f12peek-referencesfigure-2-6-the-typescript-language-service-provides-a-go-to-definition-feature-that-should-be-surfaced-in-your-editorselecting-this-option-takes-you-into-libdomdts-the-type-declarations-which-typescript-includes-for-the-domdeclare-function-fetchinput-request-info-init-requestinit--promiseresponseyou-can-see-that-fetch-returns-a-promise-and-takes-two-arguments-clicking-through-on-requestinfo-brings-you-heretype-request-info-request-string\" aria-label=\"provide a go to definition option in mine it looks like it does in figure 2 6const response  fetchhttpexamplecomgo to definitionf12peek definitionxf12go to type definitionfind all referencesxf12f12peek referencesfigure 2 6 the typescript language service provides a go to definition feature that should be surfaced in your editorselecting this option takes you into libdomdts the type declarations which typescript includes for the domdeclare function fetchinput request info init requestinit  promiseresponseyou can see that fetch returns a promise and takes two arguments clicking through on requestinfo brings you heretype request info request string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>provide a “Go to Definition” option. In mine it looks like it does in Figure 2-6.\nconst response = fetch(’<a href=\"http://example.com\">http://example.com</a>’);\nGo to Definition\nF12\nPeek Definition\nXF12\nGo to Type Definition\nFind All References\nXF12\nF12\nPeek References\nFigure 2-6. The TypeScript language service provides a “Go to Definition” feature that should be surfaced in your editor.\nSelecting this option takes you into lib.dom.d.ts, the type declarations which TypeScript includes for the DOM:\ndeclare function fetch(\ninput: Request Info, init?: RequestInit ): Promise<Response>;\nYou can see that fetch returns a Promise and takes two arguments. Clicking through on RequestInfo brings you here:\ntype Request Info Request string;</h1>\n<p>from which you can go to Request:\ndeclare var Request: {\nprototype: Request;\nnew(input: Request Info, init?: RequestInit): Request;\n};\nHere you can see that the Request type and value are being modeled separately (see Item 8). You’ve seen Request Info already. Clicking through on RequestInit shows everything you can use to construct a Request:</p>\n<p>interface RequestInit {\n}\nbody?: BodyInit | null; cache? RequestCache;\ncredentials?: RequestCredentials; headers?: Headers Init;\n// …\nThere are many more types you could follow here, but you get the idea. Type declarations can be challenging to read at first, but they’re an excellent way to see what can be done with TypeScript, how the library you’re using is modeled, and how you might debug errors. For much more on type declarations, see Chapter 6.\nThings to Remember</p>\n<h1 id=\"understand-evolving-any\" style=\"position:relative;\"><a href=\"#understand-evolving-any\" aria-label=\"understand evolving any permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Understand Evolving any</h1>\n<ul>\n<li>example 1:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Type is any[]</span>\nresult<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult  <span class=\"token comment\">// Type is string[]</span>\nresult<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult  <span class=\"token comment\">// Type is (string | number)[]</span></code></pre></div>\n<ul>\n<li>Implicit any types do not evolve through function calls. The arrow function here trips up inference:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeSquares</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">start</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">limit</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> out <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// ~~~ Variable 'out' implicitly has type 'any[]' in some locations</span>\n  <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    out<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// ~~~ Variable 'out' implicitly has an 'any[]' type</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>In cases like this, you may want to consider using an array’s map and filter methods to build arrays in a single statement and avoid iteration and evolving any entirely</p>\n</li>\n<li>\n<p><strong>Things to Remember</strong></p>\n<ul>\n<li>While TypeScript types typically only refine, implicit any and any[] types are allowed to evolve. You should be able to recognize and understand this construct where it occurs.</li>\n<li>For better error checking, consider providing an explicit type annotation instead of using evolving any.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"push-null-values-to-the-perimeter-of-your-types\" style=\"position:relative;\"><a href=\"#push-null-values-to-the-perimeter-of-your-types\" aria-label=\"push null values to the perimeter of your types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>push null values to the perimeter of your types</h1>\n<ul>\n<li>example 1:\n<ul>\n<li>avoid</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>better approach would be:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">result</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>mix of null and non-null values can also lead to problems in classes. For example</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UserPosts</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> UserInfo <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> Post <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>posts <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchPostsForUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>better design would wait until all the data used by the class is available</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UserPosts</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> UserInfo<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">posts</span><span class=\"token operator\">:</span> Post <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>posts <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> posts<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchPostsForUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserPosts</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>don’t be tempted to replace nullable properties with promises. This tends to lead to even more confusing code and forces all your methods to be async. Promises clarify the code that loads data but tend to have the opposite effect on the class that uses that data.)</p>\n</li>\n<li>\n<p><strong>Things to Remember</strong></p>\n<ul>\n<li>Avoid designs in which one value being null or not null is implicitly related to another value being null or not null.</li>\n<li>Push null values to the perimeter of your API by making larger objects either null or fully non-null. This will make code clearer both for human readers and for the type checker.</li>\n<li>Consider creating a fully non-null class and constructing it when all values are available.</li>\n<li>While strictNullChecks may flag many issues in your code, it’s indispensable for surfacing the behavior of functions with respect to null values.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"avoid-cluttering-your-code-with-inferable-types\" style=\"position:relative;\"><a href=\"#avoid-cluttering-your-code-with-inferable-types\" aria-label=\"avoid cluttering your code with inferable types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Avoid Cluttering Your Code with Inferable Types</h1>\n<ul>\n<li>example 1:</li>\n</ul>\n<p>Don’t write:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Instead, just write:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>example 2:</li>\n</ul>\n<p>Instead of:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">born</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">when</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">died</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">when</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Sojourner Truth'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">born</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> <span class=\"token string\">'Swartekill, NY'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">when</span><span class=\"token operator\">:</span> <span class=\"token string\">'c.1797'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">died</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> <span class=\"token string\">'Battle Creek, MI'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">when</span><span class=\"token operator\">:</span> <span class=\"token string\">'Nov. 26, 1883'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>you can just write:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Sojourner Truth'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">born</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> <span class=\"token string\">'Swartekill, NY'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">when</span><span class=\"token operator\">:</span> <span class=\"token string\">'c.1797'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">died</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">where</span><span class=\"token operator\">:</span> <span class=\"token string\">'Battle Creek, MI'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">when</span><span class=\"token operator\">:</span> <span class=\"token string\">'Nov. 26, 1883'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>example 3:</li>\n</ul>\n<p>instead of:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">logProduct</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">product</span><span class=\"token operator\">:</span> Product</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> product<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> product<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> product<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>you can just write:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">logProduct</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">product</span><span class=\"token operator\">:</span> Product</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> product<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>example 4:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Don't do this:</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/health'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">request</span><span class=\"token operator\">:</span> express<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">response</span><span class=\"token operator\">:</span> express<span class=\"token punctuation\">.</span>Response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Do this:</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/health'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>There are a few situations where you may still want to specify a type even where it can be inferred.</p>\n<ul>\n<li>when you define an object literal</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">elmo</span><span class=\"token operator\">:</span> Product <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tickle Me Elmo'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'048188 627152'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">28.99</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- When you specify a type on a definition like this, you enable excess property checking. This can help catch errors, particularly for types with optional fields.\n- You also increase the odds that an error will be reported in the right place (type error where it's defined vs type error where it's used)</code></pre></div>\n<ul>\n<li>\n<p>You may still want to annotate return type even when it can be inferred to ensure that implementation errors don’t leak out into uses of the function.</p>\n<ul>\n<li>Writing out the return type may also help you think more clearly about your function: you should know what its input and output types are before you implement it. While the implementation may shift around a bit, the function’s contract (its type signature) generally should not. This is similar in spirit to test-driven development (TDD), in which you write the tests that exercise a function before you implement it. Writing the full type signature first helps get you the function you want, rather than the one the implementation makes expedient.</li>\n</ul>\n</li>\n<li>\n<p>If you are using a linter, the eslint rule no-inferrable-types (note the variant spelling) can help ensure that all your type annotations are really necessary.</p>\n</li>\n</ul>\n<h1 id=\"dont-repeat-type-information-in-documentation\" style=\"position:relative;\"><a href=\"#dont-repeat-type-information-in-documentation\" aria-label=\"dont repeat type information in documentation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Don’t Repeat Type Information in Documentation</h1>\n<ul>\n<li>example 1:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * Returns a string with the foreground color.\n * Takes zero or one arguments. With no arguments, returns the\n * standard foreground color. With one argument, returns the foreground color\n * for a particular page.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getForegroundColor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> page <span class=\"token operator\">===</span> <span class=\"token string\">'login'</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">r</span><span class=\"token operator\">:</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">g</span><span class=\"token operator\">:</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">127</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">r</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">g</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>better declaration and comment might look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Color</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">r</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">g</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** Get the foreground color for the application or a specific page. */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getForegroundColor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Color <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Example 2:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/** Does not modify nums */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">nums</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>declare it readonly and let TypeScript enforce the contract</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">nums</span><span class=\"token operator\">:</span> readonly number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>Avoid repeating type information in comments and variable names. In the best case it is duplicative of type declarations, and in the worst it will lead to conflicting information.</p>\n</li>\n<li>\n<p>Consider including units in variable names if they aren’t clear from the type (e.g., timeMs or temperatureC).</p>\n</li>\n</ul>\n<h1 id=\"quotes\" style=\"position:relative;\"><a href=\"#quotes\" aria-label=\"quotes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quotes</h1>\n<h1 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h1>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/\">https://www.typescriptlang.org/docs/handbook/</a></li>\n<li><a href=\"https://www.typescriptlang.org/play\">https://www.typescriptlang.org/play</a></li>\n<li><a href=\"https://github.com/danvk/effective-typescript\">https://github.com/danvk/effective-typescript</a></li>\n<li><a href=\"https://effectivetypescript.com/\">https://effectivetypescript.com/</a></li>\n<li><a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">https://github.com/microsoft/TypeScript/wiki/Performance</a></li>\n<li><a href=\"https://google.github.io/styleguide/tsguide.html\">https://google.github.io/styleguide/tsguide.html</a></li>\n</ul>","frontmatter":{"title":"effective typescript summary","date":"March 05, 2024","description":"effective typescript summary"}},"previous":{"fields":{"slug":"/daily-dad-summary/"},"frontmatter":{"title":"daily dad by Ryan Holiday Summary"}},"next":{"fields":{"slug":"/atomic-habits/"},"frontmatter":{"title":"Atomic Habits by James Clear summary"}}},"pageContext":{"id":"9679aa6a-1780-509e-8dcc-ea51193762d8","previousPostId":"77b1c09b-c121-53b0-a440-25a0df3d2e9a","nextPostId":"0aa1f8fc-4909-54fc-afcf-6bcbecbf55e1"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}