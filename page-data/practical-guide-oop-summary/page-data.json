{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/practical-guide-oop-summary/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Conversations on agile technical practices and investments"}},"markdownRemark":{"id":"ab871c28-5d34-5df3-a2f1-eeb9b7ee67cb","excerpt":"Table of Contents Table of Contents Goals/Key Ideas/Context rediscovering simplicity judging the code judging the design unearthing concepts creating classes…","html":"<h1>Table of Contents</h1>\n<ul>\n<li><a href=\"#table-of-contents\">Table of Contents</a></li>\n<li><a href=\"#goalskey-ideascontext\">Goals/Key Ideas/Context</a></li>\n<li><a href=\"#rediscovering-simplicity\">rediscovering simplicity</a>\n<ul>\n<li><a href=\"#judging-the-code\">judging the code</a></li>\n<li><a href=\"#judging-the-design\">judging the design</a></li>\n</ul>\n</li>\n<li><a href=\"#unearthing-concepts\">unearthing concepts</a>\n<ul>\n<li><a href=\"#creating-classes-with-single-responsibility\">creating classes with single responsibility</a></li>\n<li><a href=\"#creating-flexible-interfaces\">creating flexible interfaces</a></li>\n</ul>\n</li>\n<li><a href=\"#tdd-as-design\">TDD as design</a></li>\n<li><a href=\"#practising-horizontal-refactoring\">practising horizontal refactoring</a></li>\n<li><a href=\"#separating-responsibilities\">separating responsibilities</a>\n<ul>\n<li><a href=\"#managing-dependencies\">managing dependencies</a></li>\n<li><a href=\"#acquiring-behavior-through-inheritance\">acquiring behavior through inheritance</a></li>\n<li><a href=\"#writing-inheritable-code\">writing inheritable code</a></li>\n</ul>\n</li>\n<li><a href=\"#achieving-openness\">Achieving openness</a>\n<ul>\n<li><a href=\"#sharing-role-behavior-with-modules\">Sharing role behavior with modules</a></li>\n<li><a href=\"#combing-objects-with-composition\">combing objects with composition</a></li>\n</ul>\n</li>\n<li><a href=\"#quotes\">Quotes</a></li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n<h1>Goals/Key Ideas/Context</h1>\n<ul>\n<li>you should not reach for abstractions, but instead you should resist them until they absolutely insist upon being created.</li>\n<li>writing code is the process of working your way to the next stable end point, not the end point itself</li>\n</ul>\n<h1>rediscovering simplicity</h1>\n<h2>judging the code</h2>\n<ul>\n<li>evaluating code based on opinion\n<ul>\n<li>look for context/concrete guidance of what the code trying to accomplish</li>\n<li><strong>any pile of code can be made to work; good code not only works, but it also simple, understandable, expressive and changeable</strong></li>\n</ul>\n</li>\n</ul>\n<h2>judging the design</h2>\n<h1>unearthing concepts</h1>\n<h2>creating classes with single responsibility</h2>\n<h2>creating flexible interfaces</h2>\n<h1>TDD as design</h1>\n<h1>practising horizontal refactoring</h1>\n<h1>separating responsibilities</h1>\n<h2>managing dependencies</h2>\n<h2>acquiring behavior through inheritance</h2>\n<h2>writing inheritable code</h2>\n<h1>Achieving openness</h1>\n<h2>Sharing role behavior with modules</h2>\n<h2>combing objects with composition</h2>\n<h1>Quotes</h1>\n<p>“Writing code is the process of working your way to the next stable end point, not the end point itself”</p>\n<h1>References</h1>\n<p><a href=\"https://github.com/keyvanakbary/learning-notes/blob/master/books/99-bottles-of-oop.md\">https://github.com/keyvanakbary/learning-notes/blob/master/books/99-bottles-of-oop.md</a>\n<a href=\"https://github.com/serodriguez68/poodr-notes\">https://github.com/serodriguez68/poodr-notes</a>\n<a href=\"https://matteopallini.com/bottles-oop-summary/\">https://matteopallini.com/bottles-oop-summary/</a>\n<a href=\"https://blog.cleancoder.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html\">https://blog.cleancoder.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html</a>\n<a href=\"https://lionadi.wordpress.com/2020/12/04/oop-tdd-99-bottles-notes-part-1-simplicity/\">https://lionadi.wordpress.com/2020/12/04/oop-tdd-99-bottles-notes-part-1-simplicity/</a>\n<a href=\"https://gist.github.com/speric/31ae0987d21eac1d4f87\">https://gist.github.com/speric/31ae0987d21eac1d4f87</a></p>","frontmatter":{"title":"practical guide to object oriented design","date":"December 31, 2021","description":"practical guide to object oriented design summary"}},"previous":{"fields":{"slug":"/listen-to-tests/"},"frontmatter":{"title":"Listen to tests, test smells and patterns"}},"next":null},"pageContext":{"id":"ab871c28-5d34-5df3-a2f1-eeb9b7ee67cb","previousPostId":"8c6ee45b-c5fd-53b2-b876-3bb4eaea00dd","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}