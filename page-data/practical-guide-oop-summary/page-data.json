{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/practical-guide-oop-summary/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Conversations on agile technical practices and investments"}},"markdownRemark":{"id":"ab871c28-5d34-5df3-a2f1-eeb9b7ee67cb","excerpt":"Table of Contents Table of Contents Goals/Key Ideas/Context rediscovering simplicity simplifying code incomprehensibly concise speculatively general concretely…","html":"<h1>Table of Contents</h1>\n<ul>\n<li><a href=\"#table-of-contents\">Table of Contents</a></li>\n<li><a href=\"#goalskey-ideascontext\">Goals/Key Ideas/Context</a></li>\n<li><a href=\"#rediscovering-simplicity\">rediscovering simplicity</a>\n<ul>\n<li><a href=\"#simplifying-code\">simplifying code</a>\n<ul>\n<li><a href=\"#incomprehensibly-concise\">incomprehensibly concise</a></li>\n<li><a href=\"#speculatively-general\">speculatively general</a></li>\n<li><a href=\"#concretely-abstract\">concretely abstract</a></li>\n<li><a href=\"#shameless-green\">shameless green</a></li>\n</ul>\n</li>\n<li><a href=\"#judging-the-code\">judging the code</a></li>\n<li><a href=\"#judging-the-design\">judging the design</a></li>\n</ul>\n</li>\n<li><a href=\"#unearthing-concepts\">unearthing concepts</a>\n<ul>\n<li><a href=\"#creating-classes-with-single-responsibility\">creating classes with single responsibility</a></li>\n<li><a href=\"#creating-flexible-interfaces\">creating flexible interfaces</a></li>\n</ul>\n</li>\n<li><a href=\"#tdd-as-design\">TDD as design</a></li>\n<li><a href=\"#practising-horizontal-refactoring\">practising horizontal refactoring</a></li>\n<li><a href=\"#separating-responsibilities\">separating responsibilities</a>\n<ul>\n<li><a href=\"#managing-dependencies\">managing dependencies</a></li>\n<li><a href=\"#acquiring-behavior-through-inheritance\">acquiring behavior through inheritance</a></li>\n<li><a href=\"#writing-inheritable-code\">writing inheritable code</a></li>\n</ul>\n</li>\n<li><a href=\"#achieving-openness\">Achieving openness</a>\n<ul>\n<li><a href=\"#sharing-role-behavior-with-modules\">Sharing role behavior with modules</a></li>\n<li><a href=\"#combing-objects-with-composition\">combing objects with composition</a></li>\n</ul>\n</li>\n<li><a href=\"#quotes\">Quotes</a></li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n<h1>Goals/Key Ideas/Context</h1>\n<ul>\n<li>you should not reach for abstractions, but instead you should resist them until they absolutely insist upon being created.</li>\n<li>writing code is the process of working your way to the next stable end point, not the end point itself</li>\n</ul>\n<h1>rediscovering simplicity</h1>\n<ul>\n<li>\n<p>getting insight into potential expense of code</p>\n<ul>\n<li>how difficult was it to write?</li>\n<li>how hard is it to understand?</li>\n<li>how expensive will it be to change?</li>\n</ul>\n</li>\n<li>\n<p>terminology: method vs sending messages</p>\n<ul>\n<li>a “method” is defined on an object and contains behavior</li>\n<li>a “message” is sent to an object to invoke behavior\n<ul>\n<li><code class=\"language-text\">song() { verses(); }</code> means that song method sends the verses message to the receiver this.</li>\n<li>therefore, <strong>method are defined, and messages are sent</strong></li>\n<li>“sending messages” are preferred to “call a method/function” as it implicitly encourage to create message senders that are willfully ignorant of implementation details, and fosters independence between senders and receivers.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>code is easy to understand when it clearly reflects the problem it’s solving, and thus openly exposes that problem’s domain</strong></p>\n</li>\n</ul>\n<h2>simplifying code</h2>\n<ul>\n<li>speculatively general and concretely abstract were both written with an eye toward reducing future costs, and it is distressing to see good intentions fail so spectacularly. <strong>The failure here is not bad intention - it’s insufficient patience.</strong></li>\n</ul>\n<h3>incomprehensibly concise</h3>\n<ul>\n<li><a href=\"https://github.com/marina-ferreira/99_bottles_of_oop/blob/main/chapter_1/01_incomprehensibly_concise.rb\">incomprehensibly concise code</a>\n<ul>\n<li>embeds a great deal of logic into the verse string</li>\n<li>the code is hard to understand because it is inconsistent and duplicative (pluralization logic), and because it contains hidden concepts that it does not name</li>\n</ul>\n</li>\n</ul>\n<h3>speculatively general</h3>\n<ul>\n<li><a href=\"https://github.com/marina-ferreira/99_bottles_of_oop/blob/main/chapter_1/02_speculatively_general.rb\">speculatively general code</a>\n<ul>\n<li>there’s far more code here  than is needed to pass the tests. This unnecessary code took time to write</li>\n<li>the many levels of indirection are confusing. You could study this code for a long time without discerning why they are needed</li>\n<li>you may feel compelled to understand its purpose before making changes.</li>\n<li>what is the rule to determine which verse should be sung next? buried deep within the NoMore lambda is a hard-coded “99,” which might cause one to infer that verse 99 follows verse 0.</li>\n</ul>\n</li>\n</ul>\n<h3>concretely abstract</h3>\n<ul>\n<li><strong>“DRY makes sense when it reduces the cost of change more than it increases the cost of understanding the code”</strong></li>\n<li>DRYing out code is not free. It adds a level of indirection, and layers of indirection make the details of what’s happening harder to understanding.</li>\n<li><a href=\"https://github.com/marina-ferreira/99_bottles_of_oop/blob/main/chapter_1/03_concretely_abstract.rb\">concretely abstract code</a>\n<ul>\n<li>it clearly took a fair amount of thought and time.</li>\n<li>the individual methods are easy to understand, it’s tough to get a sense of the entire song. The parts doesn’t seem to add up to the whole</li>\n<li>while changing the code inside any individual method is cheap, in many cases, one simple change will cascade and force many other changes.</li>\n<li>what is the rule to determine which verse should be sung next? Ditto.</li>\n</ul>\n</li>\n</ul>\n<h3>shameless green</h3>\n<ul>\n<li><a href=\"https://github.com/marina-ferreira/99_bottles_of_oop/blob/main/chapter_1/04_shameless_green.rb\">shameless green</a>\n<ul>\n<li>it was easy to write and understand</li>\n<li>it will be cheap to change. Even though the verse strings are duplicated, if one verse changes it’s easy to keep the others in sync.</li>\n<li>what is the rule to determine which verse should be sung next? This is still not explicit. The 0 verse contains</li>\n</ul>\n</li>\n</ul>\n<h2>judging the code</h2>\n<ul>\n<li>evaluating code based on opinion\n<ul>\n<li>look for context/concrete guidance of what the code trying to accomplish</li>\n<li><strong>any pile of code can be made to work; good code not only works, but it also simple, understandable, expressive and changeable</strong></li>\n</ul>\n</li>\n</ul>\n<h2>judging the design</h2>\n<h1>unearthing concepts</h1>\n<h2>creating classes with single responsibility</h2>\n<h2>creating flexible interfaces</h2>\n<h1>TDD as design</h1>\n<h1>practising horizontal refactoring</h1>\n<h1>separating responsibilities</h1>\n<h2>managing dependencies</h2>\n<h2>acquiring behavior through inheritance</h2>\n<h2>writing inheritable code</h2>\n<h1>Achieving openness</h1>\n<h2>Sharing role behavior with modules</h2>\n<h2>combing objects with composition</h2>\n<h1>Quotes</h1>\n<p>“Writing code is the process of working your way to the next stable end point, not the end point itself”</p>\n<p><strong>“DRY makes sense when it reduces the cost of change more than it increases the cost of understanding the code”</strong></p>\n<h1>References</h1>\n<p><a href=\"https://github.com/keyvanakbary/learning-notes/blob/master/books/99-bottles-of-oop.md\">https://github.com/keyvanakbary/learning-notes/blob/master/books/99-bottles-of-oop.md</a>\n<a href=\"https://github.com/serodriguez68/poodr-notes\">https://github.com/serodriguez68/poodr-notes</a>\n<a href=\"https://matteopallini.com/bottles-oop-summary/\">https://matteopallini.com/bottles-oop-summary/</a>\n<a href=\"https://blog.cleancoder.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html\">https://blog.cleancoder.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html</a>\n<a href=\"https://lionadi.wordpress.com/2020/12/04/oop-tdd-99-bottles-notes-part-1-simplicity/\">https://lionadi.wordpress.com/2020/12/04/oop-tdd-99-bottles-notes-part-1-simplicity/</a>\n<a href=\"https://gist.github.com/speric/31ae0987d21eac1d4f87\">https://gist.github.com/speric/31ae0987d21eac1d4f87</a></p>","frontmatter":{"title":"practical guide to object oriented design","date":"December 31, 2021","description":"practical guide to object oriented design summary"}},"previous":{"fields":{"slug":"/listen-to-tests/"},"frontmatter":{"title":"Listen to tests, test smells and patterns"}},"next":null},"pageContext":{"id":"ab871c28-5d34-5df3-a2f1-eeb9b7ee67cb","previousPostId":"8c6ee45b-c5fd-53b2-b876-3bb4eaea00dd","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}