{"componentChunkName":"component---src-templates-blog-post-js","path":"/fundamentals-software-architecture/","result":{"data":{"site":{"siteMetadata":{"title":"Conversations on agile technical practices and investments","disqus":{"shortName":"trungvo"}}},"markdownRemark":{"id":"8f2b0af5-5ae5-5c6a-8ef9-7d3c8c0ffa11","excerpt":"🔰 Introduction: Understanding the Role of a Software Architect The authors open with an observation: “The job ‘software architect’ appears near the top of…","html":"<h1 id=\"-introduction-understanding-the-role-of-a-software-architect\" style=\"position:relative;\"><a href=\"#-introduction-understanding-the-role-of-a-software-architect\" aria-label=\" introduction understanding the role of a software architect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔰 <strong>Introduction: Understanding the Role of a Software Architect</strong></h1>\n<p>The authors open with an observation:</p>\n<blockquote>\n<p><strong>“The job ‘software architect’ appears near the top of numerous lists of best jobs across the world.”</strong></p>\n</blockquote>\n<p>But unlike nurses or finance managers, there’s <strong>no clear path</strong> to becoming one.</p>\n<p>Why? Because:</p>\n<ol>\n<li>There is <strong>no single, widely accepted definition</strong> of software architecture.</li>\n<li>The <strong>scope of the role has expanded immensely</strong> in recent years.</li>\n<li>Software architecture is a <strong>moving target</strong>—constantly evolving.</li>\n<li>Much existing literature is <strong>outdated or context-specific</strong>.</li>\n</ol>\n<hr>\n<h2 id=\"-defining-software-architecture-a-multifaceted-view\" style=\"position:relative;\"><a href=\"#-defining-software-architecture-a-multifaceted-view\" aria-label=\" defining software architecture a multifaceted view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧱 <strong>Defining Software Architecture: A Multifaceted View</strong></h2>\n<h3 id=\"-architecture-is-about-the-important-stuff-whatever-that-is--ralph-johnson\" style=\"position:relative;\"><a href=\"#-architecture-is-about-the-important-stuff-whatever-that-is--ralph-johnson\" aria-label=\" architecture is about the important stuff whatever that is  ralph johnson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❝ <em>“Architecture is about the important stuff… whatever that is.”</em> — Ralph Johnson</h3>\n<p>Mark and Neal refuse to reduce architecture to a narrow definition. Instead, they build a <strong>layered conceptual model</strong>:</p>\n<hr>\n<h3 id=\"1-structure-of-the-system\" style=\"position:relative;\"><a href=\"#1-structure-of-the-system\" aria-label=\"1 structure of the system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <strong>Structure of the System</strong></h3>\n<ul>\n<li>This is the most <strong>visible</strong> layer: what architecture <em>looks</em> like.</li>\n<li>Examples:\n<ul>\n<li>A <strong>microservices</strong> architecture (many independent services).</li>\n<li>A <strong>layered</strong> architecture (presentation → business → data).</li>\n<li>A <strong>monolith</strong> (all-in-one deployable unit).</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>“Describing an architecture solely by the structure does not wholly elucidate an architecture.”</strong></p>\n</blockquote>\n<p>Structure alone doesn’t explain the <strong>why</strong> or the <strong>rules</strong> behind it.</p>\n<hr>\n<h3 id=\"2-architecture-characteristics-the--ilities\" style=\"position:relative;\"><a href=\"#2-architecture-characteristics-the--ilities\" aria-label=\"2 architecture characteristics the  ilities permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <strong>Architecture Characteristics (The ‘-ilities’)</strong></h3>\n<p>These define <strong>non-functional success criteria</strong>:</p>\n<ul>\n<li>Scalability</li>\n<li>Availability</li>\n<li>Performance</li>\n<li>Maintainability</li>\n<li>Security</li>\n<li>Observability</li>\n</ul>\n<p>📌 <strong>Example:</strong> Two systems may perform the same functions (e.g., an e-commerce platform), but if one crashes under load, it lacks <em>availability</em> and <em>scalability</em>—making its architecture unsuitable.</p>\n<hr>\n<h3 id=\"3-architecture-decisions\" style=\"position:relative;\"><a href=\"#3-architecture-decisions\" aria-label=\"3 architecture decisions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. <strong>Architecture Decisions</strong></h3>\n<p>These are <strong>explicit rules or constraints</strong>.</p>\n<ul>\n<li>They are what <strong>makes or breaks</strong> your architecture.</li>\n<li><strong>Example:</strong> “Only the business layer may access the database.” This enforces <em>layer isolation</em> to prevent ripple effects.</li>\n</ul>\n<blockquote>\n<p><strong>“Architecture decisions define the rules for how a system should be constructed.”</strong></p>\n</blockquote>\n<p>They can also be <strong>technology-specific</strong> when needed, e.g., “We will use Kafka for asynchronous event communication.”</p>\n<hr>\n<h3 id=\"4-design-principles\" style=\"position:relative;\"><a href=\"#4-design-principles\" aria-label=\"4 design principles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. <strong>Design Principles</strong></h3>\n<p>Unlike hard rules, these are <strong>guiding heuristics</strong>.</p>\n<ul>\n<li><strong>Example:</strong> “Prefer asynchronous messaging for internal service communication.”</li>\n<li>They allow <strong>flexibility</strong> depending on the context.</li>\n</ul>\n<blockquote>\n<p><strong>“A design principle differs from an architecture decision in that it is a guideline rather than a hard-and-fast rule.”</strong></p>\n</blockquote>\n<hr>\n<h3 id=\"-expectations-of-a-software-architect-not-just-a-title-but-a-mission\" style=\"position:relative;\"><a href=\"#-expectations-of-a-software-architect-not-just-a-title-but-a-mission\" aria-label=\" expectations of a software architect not just a title but a mission permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 <strong>Expectations of a Software Architect (Not Just a Title, But a Mission)</strong></h3>\n<p>Rather than define the role, the authors focus on what <strong>architects are expected to do</strong>.</p>\n<hr>\n<h4 id=\"1-make-architecture-decisions\" style=\"position:relative;\"><a href=\"#1-make-architecture-decisions\" aria-label=\"1 make architecture decisions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>1. Make Architecture Decisions</strong></h4>\n<ul>\n<li><em>An architect is expected to define the architecture decisions and design principles used to guide technology decisions within the team, the department, or across the enterprise.</em></li>\n</ul>\n<blockquote>\n<p><strong>“Guide is the key operative word.”</strong></p>\n</blockquote>\n<p>Instead of mandating:<br>\n❌ “Use React.js”<br>\nArchitects should say:<br>\n✅ “Use a reactive front-end framework (e.g., React, Vue, Angular).”</p>\n<p>🧠 Why? This empowers dev teams while aligning with architectural goals.</p>\n<p>📌 <strong>Real-world example:</strong> If your architecture prioritizes <em>performance</em>, you may <strong>guide teams toward frameworks that support server-side rendering</strong> for faster page loads—e.g., Next.js.</p>\n<hr>\n<h4 id=\"2-continually-analyze-the-architecture\" style=\"position:relative;\"><a href=\"#2-continually-analyze-the-architecture\" aria-label=\"2 continually analyze the architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>2. Continually Analyze the Architecture</strong></h4>\n<blockquote>\n<p><strong>“Architecture vitality” measures how viable your design remains over time.”</strong></p>\n</blockquote>\n<p>Architectures degrade if left unchecked:</p>\n<ul>\n<li>Teams might take shortcuts.</li>\n<li>Requirements evolve.</li>\n<li>Tech changes.</li>\n</ul>\n<p>📌 <strong>Example:</strong> A startup that launched with a monolith may now struggle to scale. A good architect would reassess and <strong>refactor toward modularity or microservices</strong>.</p>\n<p>Architects must <strong>observe the decay</strong>, and <strong>proactively evolve</strong> the design.</p>\n<hr>\n<h4 id=\"3-keep-current-with-trends\" style=\"position:relative;\"><a href=\"#3-keep-current-with-trends\" aria-label=\"3 keep current with trends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>3. Keep Current with Trends</strong></h4>\n<blockquote>\n<p><strong>“The decisions an architect makes tend to be long-lasting and difficult to change.”</strong></p>\n</blockquote>\n<p>That’s why you must:</p>\n<ul>\n<li>Stay updated on tools like Kubernetes, serverless, observability stacks (e.g., OpenTelemetry).</li>\n<li>Understand <strong>emerging patterns</strong> (e.g., event-driven architectures, edge computing).</li>\n</ul>\n<p>📌 <strong>Example:</strong> Adopting containerization early allows easier migration to cloud-native platforms later.</p>\n<hr>\n<h4 id=\"4-ensure-compliance-with-architecture\" style=\"position:relative;\"><a href=\"#4-ensure-compliance-with-architecture\" aria-label=\"4 ensure compliance with architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>4. Ensure Compliance with Architecture</strong></h4>\n<blockquote>\n<p><strong>“Violations can cause ripple effects and undermine the system.”</strong></p>\n</blockquote>\n<p>Architects must:</p>\n<ul>\n<li>Monitor whether teams are following defined decisions.</li>\n<li>Use tools like <strong>ArchUnit</strong> (Java) or <strong>fitness functions</strong> to enforce structure.</li>\n</ul>\n<p>📌 <strong>Example:</strong> A developer bypasses the service layer to make a DB call from the UI—this violates layering, potentially breaking encapsulation. If the DB schema changes, the UI could crash.</p>\n<hr>\n<h4 id=\"5-diverse-exposure--experience\" style=\"position:relative;\"><a href=\"#5-diverse-exposure--experience\" aria-label=\"5 diverse exposure  experience permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>5. Diverse Exposure &#x26; Experience</strong></h4>\n<blockquote>\n<p><strong>“An architect should be familiar with a variety of technologies.”</strong></p>\n</blockquote>\n<p>Not an expert in all, but enough to:</p>\n<ul>\n<li>Recognize appropriate use cases.</li>\n<li>Spot trade-offs.</li>\n</ul>\n<p>📌 <strong>Example:</strong> Knowing that Redis offers speed but lacks persistence helps you choose between Redis and PostgreSQL based on whether you need <strong>caching or durable storage</strong>.</p>\n<hr>\n<h4 id=\"6-business-domain-knowledge\" style=\"position:relative;\"><a href=\"#6-business-domain-knowledge\" aria-label=\"6 business domain knowledge permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>6. Business Domain Knowledge</strong></h4>\n<blockquote>\n<p><strong>“Without business domain knowledge, it is difficult to design an effective architecture.”</strong></p>\n</blockquote>\n<p>You need to:</p>\n<ul>\n<li>Speak the language of stakeholders.</li>\n<li>Understand the business <em>goals</em> driving technical choices.</li>\n</ul>\n<p>📌 <strong>Example:</strong> In a fintech app, knowing terms like “hedge ratio” or “margin call” allows you to design a <strong>domain-driven architecture</strong> with bounded contexts that match business areas.</p>\n<hr>\n<h4 id=\"7-interpersonal--leadership-skills\" style=\"position:relative;\"><a href=\"#7-interpersonal--leadership-skills\" aria-label=\"7 interpersonal  leadership skills permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>7. Interpersonal &#x26; Leadership Skills</strong></h4>\n<blockquote>\n<p><strong>“Architecture is a people problem.”</strong></p>\n</blockquote>\n<p>Architects must:</p>\n<ul>\n<li>Facilitate decisions across teams.</li>\n<li>Mentor devs.</li>\n<li>Communicate ideas clearly.</li>\n</ul>\n<p>📌 <strong>Example:</strong> You’ll need to <strong>present the rationale</strong> behind a new deployment pipeline to both engineers and business leads, adjusting the message to each audience.</p>\n<hr>\n<h4 id=\"8-understand-and-navigate-politics\" style=\"position:relative;\"><a href=\"#8-understand-and-navigate-politics\" aria-label=\"8 understand and navigate politics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>8. Understand and Navigate Politics</strong></h4>\n<blockquote>\n<p><strong>“Almost every decision an architect makes will be challenged.”</strong></p>\n</blockquote>\n<p>You must:</p>\n<ul>\n<li>Anticipate resistance (from devs, managers, stakeholders).</li>\n<li>Negotiate and persuade.</li>\n</ul>\n<p>📌 <strong>Example:</strong> If you propose data silos to protect customer information, other teams will resist losing direct access. You’ll need to <strong>justify it using security, audit, and long-term maintainability arguments.</strong></p>\n<hr>\n<h3 id=\"-the-expanding-scope-of-software-architecture\" style=\"position:relative;\"><a href=\"#-the-expanding-scope-of-software-architecture\" aria-label=\" the expanding scope of software architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔗 <strong>The Expanding Scope of Software Architecture</strong></h3>\n<p>Modern architecture now intersects deeply with:</p>\n<h4 id=\"-engineering-practices\" style=\"position:relative;\"><a href=\"#-engineering-practices\" aria-label=\" engineering practices permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>▶ Engineering Practices</strong></h4>\n<ul>\n<li>CI/CD, automated testing, fitness functions</li>\n<li><strong>Evolutionary architecture</strong> ensures systems adapt gracefully.</li>\n</ul>\n<p>📌 <strong>Example:</strong> Use a test that <strong>fails the build</strong> if page load times exceed 1.5 seconds. This enforces performance as a “first-class concern.”</p>\n<hr>\n<h4 id=\"-devops\" style=\"position:relative;\"><a href=\"#-devops\" aria-label=\" devops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>▶ DevOps</strong></h4>\n<blockquote>\n<p><strong>“DevOps is a revolution, not a buzzword.”</strong></p>\n</blockquote>\n<p>Before DevOps, architects designed around the assumption that <strong>ops is slow and bureaucratic</strong>.</p>\n<p>Now:</p>\n<ul>\n<li>Architecture and ops are symbiotic.</li>\n<li>Architects design systems assuming <strong>automated provisioning</strong>, <strong>observability</strong>, <strong>resilience</strong>.</li>\n</ul>\n<p>📌 <strong>Example:</strong> Kubernetes-native apps assume dynamic scaling, circuit breakers, service discovery—this shapes architecture from day one.</p>\n<hr>\n<h4 id=\"-software-development-process\" style=\"position:relative;\"><a href=\"#-software-development-process\" aria-label=\" software development process permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>▶ Software Development Process</strong></h4>\n<ul>\n<li>Architecture supports Agile better than Waterfall.</li>\n<li>Why? Agile’s <strong>iterative nature matches the way architecture evolves</strong>.</li>\n</ul>\n<p>📌 <strong>Example:</strong> You start with a monolith for speed, but incrementally extract services using the <strong>Strangler Fig pattern</strong>. Agile enables this controlled evolution.</p>\n<hr>\n<h4 id=\"-data\" style=\"position:relative;\"><a href=\"#-data\" aria-label=\" data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>▶ Data</strong></h4>\n<blockquote>\n<p><strong>“Code and data have a symbiotic relationship: one isn’t useful without the other.”</strong></p>\n</blockquote>\n<p>Architects must:</p>\n<ul>\n<li>Understand data ownership, partitioning, and access patterns.</li>\n<li>Respect data consistency, latency, and governance constraints.</li>\n</ul>\n<p>📌 <strong>Example:</strong> Event sourcing is great for traceability but complicates consistency and querying. Understanding these trade-offs is architectural thinking.</p>\n<hr>\n<h3 id=\"️-the-laws-of-software-architecture\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-the-laws-of-software-architecture\" aria-label=\"️ the laws of software architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⚖️ <strong>The Laws of Software Architecture</strong></h3>\n<blockquote>\n<p><strong>First Law:</strong> ❝ Everything in software architecture is a trade-off. ❞<br>\n<strong>Corollary:</strong> ❝ If you think it isn’t, you haven’t identified the trade-off yet. ❞</p>\n</blockquote>\n<p>📌 <strong>Example:</strong></p>\n<ul>\n<li>REST APIs: Simple, flexible—but verbose and slower than binary protocols.</li>\n<li>gRPC: Fast and efficient—but harder to debug and monitor.</li>\n</ul>\n<blockquote>\n<p><strong>Second Law:</strong> ❝ Why is more important than how. ❞</p>\n</blockquote>\n<p>Knowing <em>why</em> a decision was made is more valuable than <em>how</em> it was implemented.</p>\n<p>📌 <strong>Example:</strong> A system may use a relational DB over NoSQL. Unless the <strong>reasons</strong> (e.g., strict ACID compliance, existing talent) are documented, future teams might assume it’s a mistake.</p>\n<p>Absolutely! Let’s <strong>deep dive into Chapter 2: “Architectural Thinking”</strong> from <em>Fundamentals of Software Architecture: An Engineering Approach</em> by Mark Richards and Neal Ford.</p>\n<p>This chapter lays the cognitive foundation of how software architects should think—<strong>a way of seeing problems, solutions, and systems differently from developers</strong>. It breaks down the mindset shift required and explores how architects must balance trade-offs, business needs, and broad technical knowledge.</p>\n<hr>\n<h2 id=\"-what-is-architectural-thinking\" style=\"position:relative;\"><a href=\"#-what-is-architectural-thinking\" aria-label=\" what is architectural thinking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧠 <strong>What Is Architectural Thinking?</strong></h2>\n<blockquote>\n<p><strong>“An architect sees things differently from a developer’s point of view.”</strong></p>\n</blockquote>\n<p>The authors liken this to how a <strong>meteorologist</strong> sees clouds versus how an <strong>artist</strong> sees them:</p>\n<ul>\n<li>The artist sees beauty, form, and expression.</li>\n<li>The meteorologist sees weather patterns, barometric pressure, and forecasts.</li>\n</ul>\n<p>In the same way:</p>\n<ul>\n<li>\n<p><strong>Developers</strong> see code, classes, bugs, and features.</p>\n</li>\n<li>\n<p><strong>Architects</strong> see coupling, scalability, resilience, and trade-offs.</p>\n</li>\n<li>\n<p>architectural thinking is about perspective, not just technical depth. It’s the ability to elevate above code, to recognize patterns, trade-offs, and systems-level implications.</p>\n</li>\n</ul>\n<p><strong>Architectural thinking</strong> is not just “thinking about the architecture.” It’s about a <strong>holistic and systemic mindset</strong>.</p>\n<hr>\n<h2 id=\"-four-pillars-of-architectural-thinking\" style=\"position:relative;\"><a href=\"#-four-pillars-of-architectural-thinking\" aria-label=\" four pillars of architectural thinking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧭 Four Pillars of Architectural Thinking</h2>\n<p>The chapter explores <strong>four major aspects</strong>:</p>\n<hr>\n<h3 id=\"1--understanding-the-difference-between-architecture-and-design\" style=\"position:relative;\"><a href=\"#1--understanding-the-difference-between-architecture-and-design\" aria-label=\"1  understanding the difference between architecture and design permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 🏗 <strong>Understanding the Difference Between Architecture and Design</strong></h3>\n<blockquote>\n<p><strong>“Architecture and design integrate closely to form solutions to business and technical problems.”</strong></p>\n</blockquote>\n<p>🛠 <strong>Traditional View (Flawed):</strong></p>\n<ul>\n<li>Architects decide high-level things: components, patterns, layers.</li>\n<li>Developers implement the code and UI.</li>\n<li>Communication is <strong>one-way</strong> (architect ➝ developer).</li>\n</ul>\n<p>📌 <strong>Problem:</strong> Architects become disconnected from implementation. Developers change architecture, architects don’t know, and vice versa.</p>\n<h4 id=\"-modern-view\" style=\"position:relative;\"><a href=\"#-modern-view\" aria-label=\" modern view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅ Modern View:</h4>\n<blockquote>\n<p><strong>“To make architecture work, both the physical and virtual barriers must be broken.”</strong></p>\n</blockquote>\n<ul>\n<li>Architecture and development should be <strong>collaborative</strong>.</li>\n<li>Architects and developers must be on the <strong>same team</strong>.</li>\n<li>There should be a <strong>bidirectional flow</strong> of communication.</li>\n</ul>\n<p>🔄 <strong>Example:</strong> If a development team finds that a synchronous call is causing latency spikes, they must work with the architect to adjust toward asynchronous design—<em>not just patch the code quietly.</em></p>\n<blockquote>\n<p>”<strong>Thinking like an architect is knowing the difference between architecture and design and seeing how the two integrate.</strong>”</p>\n</blockquote>\n<p>This distinction can be subtle but <strong>critical</strong>.</p>\n<ul>\n<li><strong>Architecture</strong>: Focuses on <strong>system-wide decisions</strong>, such as choosing microservices over a monolith, defining APIs, selecting message buses, etc.</li>\n<li><strong>Design</strong>: Focuses on <strong>localized implementation</strong>, like writing class hierarchies or designing user forms.</li>\n</ul>\n<h4 id=\"-example\" style=\"position:relative;\"><a href=\"#-example\" aria-label=\" example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔥 Example:</h4>\n<table>\n<thead>\n<tr>\n<th>Role</th>\n<th>Activity</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Architect</td>\n<td>Defines modular boundaries, service interfaces, data flow</td>\n</tr>\n<tr>\n<td>Developer</td>\n<td>Implements validation logic, user interface behaviors</td>\n</tr>\n</tbody>\n</table>\n<p>A clear <strong>example</strong> is in choosing an architectural style (like Event-Driven Architecture). That’s an architectural decision. A developer implementing a pub-sub component in JavaScript is doing design.</p>\n<hr>\n<h3 id=\"2--technical-breadth-vs-technical-depth\" style=\"position:relative;\"><a href=\"#2--technical-breadth-vs-technical-depth\" aria-label=\"2  technical breadth vs technical depth permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 🌐 <strong>Technical Breadth vs. Technical Depth</strong></h3>\n<blockquote>\n<p><strong>“An architect must have a significant amount of technical breadth.”</strong></p>\n</blockquote>\n<p>📚 The authors present the <strong>Knowledge Pyramid</strong>:</p>\n<ul>\n<li><strong>Stuff You Know</strong>: Your current stack (e.g., Java, Spring Boot).</li>\n<li><strong>Stuff You Know You Don’t Know</strong>: Heard of but no expertise (e.g., Rust, GraphQL).</li>\n<li><strong>Stuff You Don’t Know You Don’t Know</strong>: Unknown unknowns (e.g., new paradigms like CRDTs or emerging protocols).</li>\n</ul>\n<p><strong>Developers:</strong> Focus on deepening the top of the pyramid—expertise in one area.<br>\n<strong>Architects:</strong> Expand the <strong>middle layer</strong>—breadth of awareness across technologies, paradigms, platforms.</p>\n<blockquote>\n<p><strong>“For an architect, it is more beneficial to know that five solutions exist than to be an expert in only one.”</strong></p>\n</blockquote>\n<p>📌 <strong>Real-world example:</strong></p>\n<ul>\n<li>A developer may master Redis.</li>\n<li>An architect should know:\n<ul>\n<li>Redis: In-memory speed, ephemeral.</li>\n<li>Memcached: Simple key-value store.</li>\n<li>Hazelcast: Distributed, Java-native.</li>\n<li>Ehcache: Tight JVM integration.</li>\n<li>Couchbase: Hybrid NoSQL with caching features.</li>\n</ul>\n</li>\n</ul>\n<p>This way, the architect can choose the <strong>right tool</strong> depending on <strong>system trade-offs</strong>.</p>\n<p>This is about <strong>T-shaped skills</strong>:</p>\n<ul>\n<li><strong>Horizontal bar</strong>: Broad exposure to languages, cloud platforms, architecture patterns, databases, etc.</li>\n<li><strong>Vertical bar</strong>: Deep expertise in at least <strong>one domain</strong>, like performance tuning or cloud deployment.</li>\n</ul>\n<h3 id=\"-examples\" style=\"position:relative;\"><a href=\"#-examples\" aria-label=\" examples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 Examples:</h3>\n<ul>\n<li>An architect might need to <strong>compare</strong> REST vs. gRPC, but also be able to <strong>configure</strong> NGINX for reverse proxying.</li>\n<li>You must know <strong>why</strong> Kafka is great for event processing <strong>and</strong> how to <strong>deploy a Kafka cluster securely</strong> in AWS.</li>\n</ul>\n<p><strong>Staying hands-on is key</strong>. Architects who code at least semi-regularly have a stronger grasp of what’s practical.</p>\n<hr>\n<h3 id=\"3-️-analyzing-trade-offs\" style=\"position:relative;\"><a href=\"#3-%EF%B8%8F-analyzing-trade-offs\" aria-label=\"3 ️ analyzing trade offs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. ⚖️ <strong>Analyzing Trade-Offs</strong></h3>\n<blockquote>\n<p><strong>“Everything in architecture is a trade-off.”</strong><br>\n<strong>“Architecture is the stuff you can’t Google.”</strong></p>\n</blockquote>\n<p>This is the <strong>core mental model</strong> of architectural thinking.</p>\n<p>Architects must constantly weigh:</p>\n<ul>\n<li>Performance vs. scalability</li>\n<li>Simplicity vs. extensibility</li>\n<li>Security vs. usability</li>\n<li>Flexibility vs. consistency</li>\n</ul>\n<hr>\n<h4 id=\"-example-auction-system-messaging-queue-vs-topic\" style=\"position:relative;\"><a href=\"#-example-auction-system-messaging-queue-vs-topic\" aria-label=\" example auction system messaging queue vs topic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📦 <strong>Example: Auction System Messaging (Queue vs. Topic)</strong></h4>\n<p>💬 <strong>Scenario:</strong> A Bid Producer sends data to three services:</p>\n<ul>\n<li>Option A: <strong>Topic</strong> (Publish-subscribe)</li>\n<li>Option B: <strong>Queues</strong> (Point-to-point)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Topic (pub-sub)</th>\n<th>Queues (point-to-point)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>✅ Easy extensibility (add new services easily)</td>\n<td>❌ Adding new services requires code change</td>\n</tr>\n<tr>\n<td>✅ High decoupling</td>\n<td>❌ Tight coupling (Bid Producer must know all queues)</td>\n</tr>\n<tr>\n<td>❌ Shared contract for all subscribers</td>\n<td>✅ Custom contracts per service</td>\n</tr>\n<tr>\n<td>❌ Hard to detect rogue listeners</td>\n<td>✅ Queue consumption is exclusive</td>\n</tr>\n<tr>\n<td>❌ No per-service scaling</td>\n<td>✅ Each queue can be monitored &#x26; scaled</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>❝Architects must ask: which is more important—<strong>extensibility</strong> or <strong>security and monitoring</strong>?❞<br>\n❝There are no right or wrong answers in architecture—**only trade-offs.**❞</p>\n</blockquote>\n<p>🧠 The <strong>key insight</strong> here is that architects must <strong>choose intentionally</strong>—not based on fads or preferences.</p>\n<h4 id=\"-examples-of-trade-offs\" style=\"position:relative;\"><a href=\"#-examples-of-trade-offs\" aria-label=\" examples of trade offs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔄 Examples of Trade-Offs:</h4>\n<ul>\n<li><strong>Microservices vs. Monoliths</strong>:\n<ul>\n<li>Microservices offer scalability and team autonomy.</li>\n<li>But they introduce <strong>latency, distributed data challenges, and devops complexity</strong>.</li>\n</ul>\n</li>\n<li><strong>SQL vs. NoSQL</strong>:\n<ul>\n<li>SQL provides transactional integrity.</li>\n<li>NoSQL scales better horizontally, but sacrifices some ACID guarantees.</li>\n</ul>\n</li>\n</ul>\n<p>The ability to <strong>reconcile</strong> these trade-offs comes with <strong>experience, context awareness, and communication with stakeholders</strong>.</p>\n<hr>\n<h3 id=\"4--understanding-business-drivers\" style=\"position:relative;\"><a href=\"#4--understanding-business-drivers\" aria-label=\"4  understanding business drivers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 💼 <strong>Understanding Business Drivers</strong></h3>\n<blockquote>\n<p><strong>“Without understanding business goals, architects can’t create relevant solutions.”</strong></p>\n</blockquote>\n<p>Architecture must <strong>serve the business</strong>. It’s not about cool tech; it’s about <strong>value delivery</strong>.</p>\n<h4 id=\"-examples-1\" style=\"position:relative;\"><a href=\"#-examples-1\" aria-label=\" examples 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧭 Examples:</h4>\n<ul>\n<li>If <strong>time-to-market</strong> is crucial, favor <strong>low-coupling, high-deployability</strong> architectures (e.g., modular monoliths or microservices).</li>\n<li>If <strong>compliance</strong> (e.g., HIPAA, GDPR) is a top concern, you must architect for <strong>data governance and auditing</strong>.</li>\n<li>If the business expects <strong>extreme scalability</strong>, focus on <strong>elastic architectures</strong> like serverless or event-driven styles.</li>\n<li>A <strong>real-time trading platform</strong> prioritizes latency over fault tolerance.</li>\n<li>A <strong>medical records system</strong> prioritizes availability, auditability, and data integrity over speed.</li>\n</ul>\n<p>Architects must know:</p>\n<ul>\n<li>Business strategy (e.g., growth, cost reduction)</li>\n<li>Critical risks (e.g., compliance, uptime)</li>\n<li>Market dynamics (e.g., customer needs, regulatory shifts)</li>\n</ul>\n<p>This knowledge informs what characteristics are prioritized in the architecture.</p>\n<hr>\n<h3 id=\"-breaking-the-barrier-between-architect-and-developer\" style=\"position:relative;\"><a href=\"#-breaking-the-barrier-between-architect-and-developer\" aria-label=\" breaking the barrier between architect and developer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚧 Breaking the Barrier Between Architect and Developer</h3>\n<blockquote>\n<p><strong>“We believe every architect should code.”</strong>\n”<strong>The architect and developer must be on the same virtual team.</strong>”</p>\n</blockquote>\n<p>But coding can become a <strong>bottleneck</strong>. So how can architects remain hands-on?</p>\n<p>✅ <strong>Strategies:</strong></p>\n<ul>\n<li><strong>Avoid owning critical-path code</strong> (delegate to devs).</li>\n<li>Write code <strong>1–3 sprints ahead</strong> (future features, POCs).</li>\n<li>Own <strong>architecture stories</strong> (e.g., refactor messaging layer).</li>\n<li>Fix <strong>bugs</strong> to stay grounded in real system pain points.</li>\n<li>Write <strong>automation tools</strong> (e.g., internal CLIs, config validators).</li>\n<li>Develop <strong>fitness functions</strong> for performance, security, structure.</li>\n<li>Conduct <strong>code reviews</strong> as an active architectural feedback loop.</li>\n<li>Architects join <strong>daily standups</strong> and <strong>pair program</strong> occasionally.</li>\n<li>The architect <strong>coaches and mentors</strong>.</li>\n<li>Architecture is <strong>iterative</strong>, not a big upfront design.</li>\n<li>Decisions are made with <strong>feedback from implementation</strong>.</li>\n</ul>\n<p>📌 <strong>Example:</strong> An architect writes a fitness function that fails CI if the service has more than 2 synchronous outbound dependencies—enforcing the <em>resilience</em> characteristic.</p>\n<hr>\n<h3 id=\"-bonus-the-knowledge-triangle\" style=\"position:relative;\"><a href=\"#-bonus-the-knowledge-triangle\" aria-label=\" bonus the knowledge triangle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧠 Bonus: The Knowledge Triangle</h3>\n<p>Though not explicitly in Chapter 2’s main body, the <strong>knowledge triangle</strong> is a related concept discussed in the self-assessment section:</p>\n<ul>\n<li><strong>Awareness</strong>: Knowing a concept exists (e.g., eventual consistency).</li>\n<li><strong>Understanding</strong>: Being able to explain how it works.</li>\n<li><strong>Skill</strong>: Having used it hands-on in a real system.</li>\n</ul>\n<h4 id=\"-architects-should-aim-to\" style=\"position:relative;\"><a href=\"#-architects-should-aim-to\" aria-label=\" architects should aim to permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>➕ Architects should aim to:</h4>\n<ul>\n<li>Have <strong>awareness</strong> of dozens of tools.</li>\n<li>Have <strong>understanding</strong> of many patterns.</li>\n<li>Have <strong>skills</strong> in a few deeply.</li>\n</ul>\n<h4 id=\"--frozen-caveman-anti-pattern\" style=\"position:relative;\"><a href=\"#--frozen-caveman-anti-pattern\" aria-label=\"  frozen caveman anti pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧊 ⚠ Frozen Caveman Anti-Pattern</h4>\n<blockquote>\n<p><strong>“Architects often fear reoccurrences of old problems and over-design for edge cases.”</strong></p>\n</blockquote>\n<p>A humorous but real problem:</p>\n<ul>\n<li>An architect once had a system go down when Italy’s network failed.</li>\n<li>Now, <em>every system</em> he designs includes isolated regional failovers—even when not necessary.</li>\n</ul>\n<p>🧠 Takeaway: Don’t let <strong>past trauma</strong> or <strong>confirmation bias</strong> dictate design.</p>\n<h1 id=\"quotes\" style=\"position:relative;\"><a href=\"#quotes\" aria-label=\"quotes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quotes</h1>\n<table>\n<thead>\n<tr>\n<th><strong>Quote</strong></th>\n<th><strong>Meaning</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>“Architecture is the stuff you can’t Google.”</strong></td>\n<td>Architecture requires context, not recipes.</td>\n</tr>\n<tr>\n<td><strong>“Everything in architecture is a trade-off.”</strong></td>\n<td>There are no perfect solutions.</td>\n</tr>\n<tr>\n<td><strong>“Architecture and design must be in sync.”</strong></td>\n<td>No handoffs—just continuous collaboration.</td>\n</tr>\n<tr>\n<td><strong>“Why is more important than how.”</strong></td>\n<td>Understand the rationale, not just the mechanics.</td>\n</tr>\n<tr>\n<td><strong>“An architect must see beyond code—to systems, teams, and outcomes.”</strong></td>\n<td>Architecture is about scale, impact, and guidance.</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h1>","frontmatter":{"title":"Fundamentals of Software Architecture An Engineering Approach by Mark Richards, Neal Ford","date":"December 27, 2024","description":"Fundamentals of Software Architecture: An Engineering Approach by Mark Richards, Neal Ford"}},"previous":{"fields":{"slug":"/observability-engineer-summary/"},"frontmatter":{"title":"observability engineer by Charity, Liz Fong and George summary"}},"next":{"fields":{"slug":"/effective-code-reviews/"},"frontmatter":{"title":"Looks Good to Me by Adrienne Braganza"}}},"pageContext":{"id":"8f2b0af5-5ae5-5c6a-8ef9-7d3c8c0ffa11","previousPostId":"a33f218a-994c-5d45-a4b5-0463f8654eed","nextPostId":"c0e9a532-44cb-59b1-a2f1-8145eae6b9e9"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}