{"componentChunkName":"component---src-templates-blog-post-js","path":"/gilded-rose-pratice-notes-april-3-2022/","result":{"data":{"site":{"siteMetadata":{"title":"Conversations on agile technical practices and investments","disqus":{"shortName":"trungvo"}}},"markdownRemark":{"id":"eae51453-d92e-5ed1-9261-936560613481","excerpt":"Questions What have you learned? It seems like as soon as we give Quality an abstraction, we can remove more duplication code around increase/decrease quality…","html":"<h1 id=\"questions\" style=\"position:relative;\"><a href=\"#questions\" aria-label=\"questions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Questions</h1>\n<ul>\n<li>What have you learned?\n<ul>\n<li>It seems like as soon as we give Quality an abstraction, we can remove more duplication code around increase/decrease quality</li>\n<li>it seems like verifyAllCombinations is handy, but it’s not available as part of jest snapshot testing</li>\n<li>First, simplify the condition to true/false after the condition is flipped to the top level then leverage ‘Alt+Enter’ to simplify the conditions as much as possible (instead of manually remove dead-code or code that is highlighted as red from test-coverage)</li>\n<li>couldn’t get the code highlight for warnings and not-covered works as the demonstrated video from Llewellyn</li>\n<li>it seems like for … forEach … stream is a pattern in languages that support stream/functional</li>\n<li>is there a better and easier way to wrap primitive fields\n<ul>\n<li>typically, add new field</li>\n<li>isolate the accessor/updater to the primitive field to reduce the reference to the field that I want to wrap</li>\n<li>make set/get using both new and old field</li>\n<li>switch the set/get using the new field as primary field</li>\n<li>remove the old field</li>\n</ul>\n</li>\n<li>remove as many side-effect (command function) as much as possible.</li>\n</ul>\n</li>\n<li>a strategy I followed?\n<ul>\n<li>flip conditional with as little effort as possible as demonstrate by Llewellyn Falco\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=wp6oSVDdbXQ&#x26;ab_channel=CraftHubEvents\">https://www.youtube.com/watch?v=wp6oSVDdbXQ&#x26;ab_channel=CraftHubEvents</a></li>\n</ul>\n</li>\n<li>avoid mutable state, creating new object instead of updating the state of the object</li>\n</ul>\n</li>\n<li>the steps I followed?\n<ul>\n<li><a href=\"https://github.com/RefactoringCombos/ArlosCommitNotation\">Arlo commit notation</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h1>\n<ul>\n<li><a href=\"https://github.com/tonytvo/coderetreat/pull/1\">https://github.com/tonytvo/coderetreat/pull/1</a></li>\n<li><a href=\"https://www.stackbuilders.com/blog/refactoring-javascript-with-functional-patterns/\">https://www.stackbuilders.com/blog/refactoring-javascript-with-functional-patterns/</a></li>\n<li><a href=\"https://fsharpforfunandprofit.com/fppatterns/\">https://fsharpforfunandprofit.com/fppatterns/</a></li>\n<li><a href=\"https://github.com/ramda/ramda\">https://github.com/ramda/ramda</a></li>\n<li><a href=\"https://vimeo.com/45140590\">https://vimeo.com/45140590</a></li>\n<li><a href=\"https://vimeo.com/122645679\">https://vimeo.com/122645679</a></li>\n<li><a href=\"https://www.stackbuilders.com/blog/refactoring-javascript-with-functional-patterns/\">https://www.stackbuilders.com/blog/refactoring-javascript-with-functional-patterns/</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=wp6oSVDdbXQ&#x26;ab_channel=CraftHubEvents\">https://www.youtube.com/watch?v=wp6oSVDdbXQ&#x26;ab_channel=CraftHubEvents</a></li>\n<li><a href=\"https://blog.ninjaferret.co.uk/2015/06/05/Introducing-Functional-Calisthenics.html\">https://blog.ninjaferret.co.uk/2015/06/05/Introducing-Functional-Calisthenics.html</a></li>\n<li><a href=\"https://www.codurance.com/publications/2017/10/12/functional-calisthenics\">https://www.codurance.com/publications/2017/10/12/functional-calisthenics</a></li>\n</ul>","frontmatter":{"title":"Notes on gilded rose kata practice April 3rd 2022","date":"April 03, 2022","description":"Notes on gilded rose kata practice April 3rd 2022"}},"previous":{"fields":{"slug":"/evolutionary-ensemble-programming-patterns-sessions-with-jbrain/"},"frontmatter":{"title":"Evolutionary Ensemble Programming Patterns for the group"}},"next":{"fields":{"slug":"/n-queens-notes-may-7-2022/"},"frontmatter":{"title":"Notes on N Queen problem May 7th 2022"}}},"pageContext":{"id":"eae51453-d92e-5ed1-9261-936560613481","previousPostId":"b5eca78f-336a-5dc4-88de-4f4a3bf89898","nextPostId":"4714c528-816b-5ff9-a5ff-2588dc44ec27"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}