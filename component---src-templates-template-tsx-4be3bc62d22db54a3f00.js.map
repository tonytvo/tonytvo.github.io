{"version":3,"sources":["webpack://gatsby-starter-bootstrap/./src/components/adsense/adsense.tsx","webpack://gatsby-starter-bootstrap/./src/components/button/button.tsx","webpack://gatsby-starter-bootstrap/./src/components/badge/badge.tsx","webpack://gatsby-starter-bootstrap/./src/templates/post/post.tsx","webpack://gatsby-starter-bootstrap/./src/templates/page/page.tsx","webpack://gatsby-starter-bootstrap/./src/templates/template.tsx"],"names":["clientId","slotId","format","useEffect","window","adsbygoogle","push","className","style","display","data-ad-client","data-ad-slot","data-ad-format","path","label","primary","Link","to","content","body","data","options","frontmatter","post","image","isIndex","adsense","html","isMore","match","key","boxShadow","title","dateTime","date","category","tags","map","tag","index","description","childImageSharp","fluid","margin","dangerouslySetInnerHTML","__html","replace","split","location","isPage","layout","site","meta"],"mappings":"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","file":"component---src-templates-template-tsx-4be3bc62d22db54a3f00.js","sourcesContent":["import React, { useEffect } from 'react'\nimport './style.scss'\n\ninterface Props {\n  clientId?: string | null\n  slotId: string\n  format: string\n}\n\ndeclare global {\n  interface Window {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    adsbygoogle: any\n  }\n}\n\nconst Adsense: React.FC<Props> = ({ clientId, slotId, format }: Props) => {\n  useEffect(() => {\n    if (clientId) {\n      window.adsbygoogle = (window.adsbygoogle || []).push({})\n    }\n  }, [clientId])\n\n  return clientId ? (\n    <div className=\"ad\">\n      <ins\n        className=\"adsbygoogle\"\n        style={{ display: 'block' }}\n        data-ad-client={clientId}\n        data-ad-slot={slotId}\n        data-ad-format={format}\n      />\n    </div>\n  ) : (\n    <></>\n  )\n}\n\nexport default Adsense\n","import React from 'react'\nimport { Link } from 'gatsby'\n\ninterface Props {\n  path: string\n  label: string\n  primary: boolean\n}\n\nconst Button: React.FC<Props> = ({ path, label, primary }: Props) => {\n  return (\n    <Link className=\"readmore\" to={path}>\n      <span\n        className={`btn btn-outline-primary btn-block ${\n          primary ? 'btn-outline-primary' : 'btn-outline-secondary'\n        }`}\n      >\n        {label}\n      </span>\n    </Link>\n  )\n}\n\nexport default Button\n","import React from 'react'\n\ninterface Props {\n  label: string\n  primary: boolean\n}\n\nconst Badges: React.FC<Props> = ({ label, primary }: Props) => {\n  return (\n    <span className={`badge ${primary ? 'badge-primary' : 'badge-secondary'}`}>\n      {label}\n    </span>\n  )\n}\n\nexport default Badges\n","import { Link } from 'gatsby'\nimport Img, { FluidObject } from 'gatsby-image'\nimport React from 'react'\n\nimport Adsense from '../../components/adsense/adsense'\nimport Button from '../../components/button/button'\nimport Badge from '../../components/badge/badge'\n\nimport './style.scss'\n\nconst getDescription = (content: string): string => {\n  const body = content.replace(\n    /<blockquote>/g,\n    '<blockquote class=\"blockquote\">'\n  )\n  if (body.match('<!--more-->')) {\n    const [description] = body.split('<!--more-->')\n    return description\n  }\n  return body\n}\n\ninterface Props {\n  data: GatsbyTypes.PostByPathQuery\n  options: {\n    isIndex: boolean\n    adsense?: string | null\n  }\n}\n\nconst Post: React.FC<Props> = ({ data, options }: Props) => {\n  const frontmatter = data.post?.frontmatter\n  const path = frontmatter?.path || ''\n  const image = frontmatter?.image || null\n  const { isIndex, adsense } = options\n  const html = data.post?.html || ''\n  const isMore = isIndex && !!html.match('<!--more-->')\n\n  return (\n    <div className=\"article\" key={path}>\n      <div className=\"container\">\n        <div className=\"info\">\n          <Link style={{ boxShadow: 'none' }} to={path}>\n            <h1>{frontmatter?.title}</h1>\n            <time dateTime={frontmatter?.date}>{frontmatter?.date}</time>\n          </Link>\n          <Badge label={frontmatter?.category || ''} primary={true} />\n          {(frontmatter?.tags || []).map((tag, index) => (\n            <Badge label={tag as string} primary={false} key={index} />\n          ))}\n        </div>\n        <div className=\"content\">\n          <p>{frontmatter?.description}</p>\n          {image?.childImageSharp?.fluid && (\n            <Img\n              fluid={image.childImageSharp.fluid as FluidObject}\n              style={{ display: 'block', margin: '0 auto' }}\n            />\n          )}\n        </div>\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={{\n            __html: isMore ? getDescription(html) : html,\n          }}\n        />\n        {isMore && <Button path={path} label=\"MORE\" primary={true} />}\n        {!isIndex && <Adsense clientId={adsense} slotId=\"\" format=\"auto\" />}\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n","import React from 'react'\n\nimport './style.scss'\n\ninterface Props {\n  data: GatsbyTypes.PostByPathQuery\n  location: Location\n}\n\nconst Page: React.FC<Props> = ({ data }: Props) => {\n  return data.post?.html ? (\n    <div dangerouslySetInnerHTML={{ __html: data.post.html }} />\n  ) : (\n    <></>\n  )\n}\n\nexport default Page\n","import { graphql } from 'gatsby'\nimport React from 'react'\n\nimport Post from './post/post'\nimport Meta from '../components/meta/meta'\nimport Layout from '../components/layout/layout'\nimport Page from './page/page'\n\ninterface Props {\n  data: GatsbyTypes.PostByPathQuery\n  location: Location\n}\n\nconst Template: React.FC<Props> = ({ data, location }: Props) => {\n  const isPage = data.post?.frontmatter?.layout != 'page'\n  return (\n    <div>\n      <Layout location={location}>\n        <Meta\n          title={data.post?.frontmatter?.title || ''}\n          site={data.site?.meta}\n        />\n        {isPage ? (\n          <Post\n            data={data}\n            options={{\n              isIndex: false,\n              adsense: data.site?.meta?.adsense,\n            }}\n          />\n        ) : (\n          <Page data={data} location={location} />\n        )}\n      </Layout>\n    </div>\n  )\n}\n\nexport default Template\n\nexport const pageQuery = graphql`\n  query PostByPath($path: String!) {\n    site {\n      meta: siteMetadata {\n        title\n        description\n        siteUrl\n        author\n        twitter\n        adsense\n      }\n    }\n    post: markdownRemark(frontmatter: { path: { eq: $path } }) {\n      id\n      html\n      frontmatter {\n        layout\n        title\n        path\n        category\n        tags\n        description\n        date(formatString: \"YYYY/MM/DD\")\n        image {\n          childImageSharp {\n            fluid(maxWidth: 500) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}